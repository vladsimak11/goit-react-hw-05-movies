{"version":3,"file":"static/js/893.09c2de4b.chunk.js","mappings":"kNACA,MAA2B,uBAA3B,EAAmE,6B,kBC+CnE,EA1Ca,WACX,OAAgCA,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GCTV,SAAmBI,GACxB,IAAMC,EAAe,IAAIC,gBAAgB,CACvCC,QAJY,mCAKZC,SAAU,UAGZ,OAAOC,MAAM,GAAD,OATG,uCASH,OAAgBL,EAAhB,oBAAyCC,IAAiBK,MAAK,SAAAC,GACzE,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MACjB,GACF,CDFGC,CAAUf,GACPS,MAAK,YAAe,IAAZO,EAAW,EAAXA,KAEP,OAAOnB,EAAYmB,EACpB,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,SAAQ,WACPtB,GAAa,EACd,GACJ,GAAE,CAACC,KAGF,iBAAKsB,UAAWC,EAAhB,UACGzB,IAAa,SAAC,IAAD,KACd,eAAIwB,UAAWC,EAAf,SACG3B,EAAS4B,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAChC,OACE,2BACE,wBACE,gBACEC,MAAM,MACNC,IAAG,8CAAyCF,GAC5CG,IAAKJ,OAGT,uBAAID,KACJ,uBAAIC,MATGD,EAYZ,QAIR,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/fetchCast.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"additionalInfo\":\"Cast_additionalInfo__M-ARD\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchCast } from '../../services/fetchCast';\nimport css from './Cast.module.css';\nimport { ThreeDots } from '../Loader/Loader';\n\nconst Cast = () => {\n  const [castList, setCastList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchCast(movieId)\n      .then(({ cast }) => {\n        // console.log(cast);\n        return setCastList(cast);\n      })\n      .catch(error => console.log(error))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <div className={css.additionalInfo}>\n      {isLoading && <ThreeDots />}\n      <ul className={css.castList}>\n        {castList.map(({ character, name, profile_path }) => {\n          return (\n            <li key={character}>\n              <p>\n                <img\n                  width=\"150\"\n                  src={`https://image.tmdb.org/t/p/original/${profile_path}`}\n                  alt={name}\n                />\n              </p>\n              <p>{character}</p>\n              <p>{name}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;","const BASE_URL = 'https://api.themoviedb.org/3/movie/';\nconst API_KEY = 'c2392c054aee28abbedad5531d1dfbd2';\n\nexport function fetchCast(movieDetailId) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    language: 'en-US',\n  });\n\n  return fetch((`${BASE_URL}${movieDetailId}/credits?${searchParams}`)).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  })\n}\n"],"names":["useState","castList","setCastList","isLoading","setIsLoading","movieId","useParams","useEffect","movieDetailId","searchParams","URLSearchParams","api_key","language","fetch","then","response","ok","Error","status","json","fetchCast","cast","catch","error","console","log","finally","className","css","map","character","name","profile_path","width","src","alt"],"sourceRoot":""}